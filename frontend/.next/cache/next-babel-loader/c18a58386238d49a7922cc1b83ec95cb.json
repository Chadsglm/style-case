{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/cihadsaglam/wesbos/style-case/frontend/components/DeleteItem.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ALL_ITEMS_QUERY } from './Items';\nconst DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\n\nclass DeleteItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"update\", (cache, payload) => {\n      // manually update the cache on the client, so it matches the server\n      // 1. Read the cache for the items we want\n      const data = cache.readQuery({\n        query: ALL_ITEMS_QUERY\n      });\n      console.log(data, payload); // 2. Filter the deleted itemout of the page\n\n      data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id); // 3. Put the items back!\n\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_ITEM_MUTATION,\n      variables: {\n        id: this.props.id\n      },\n      update: this.update,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, (deleteItem, {\n      error\n    }) => __jsx(\"button\", {\n      onClick: () => {\n        if (confirm('Are you sure you want to delete this item?')) {\n          deleteItem().catch(err => {\n            alert(err.message);\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.props.children));\n  }\n\n}\n\nexport default DeleteItem;","map":{"version":3,"sources":["/Users/cihadsaglam/wesbos/style-case/frontend/components/DeleteItem.js"],"names":["React","Component","Mutation","gql","ALL_ITEMS_QUERY","DELETE_ITEM_MUTATION","DeleteItem","cache","payload","data","readQuery","query","console","log","items","filter","item","id","deleteItem","writeQuery","render","props","update","error","confirm","catch","err","alert","message","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,MAAMC,oBAAoB,GAAGF,GAAI;;;;;;CAAjC;;AAQA,MAAMG,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;;AAAA,oCACxB,CAACM,KAAD,EAAQC,OAAR,KAAoB;AAC3B;AACA;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEP;AAAT,OAAhB,CAAb;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBD,OAAlB,EAJ2B,CAK3B;;AACAC,MAAAA,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACK,KAAL,CAAWC,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,OAAO,CAACC,IAAR,CAAaS,UAAb,CAAwBD,EAA9D,CAAb,CAN2B,CAO3B;;AACAV,MAAAA,KAAK,CAACY,UAAN,CAAiB;AAAER,QAAAA,KAAK,EAAEP,eAAT;AAA0BK,QAAAA;AAA1B,OAAjB;AACD,KAVgC;AAAA;;AAWjCW,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,QAAD;AACE,MAAA,QAAQ,EAAEf,oBADZ;AAEE,MAAA,SAAS,EAAE;AAAEY,QAAAA,EAAE,EAAE,KAAKI,KAAL,CAAWJ;AAAjB,OAFb;AAGE,MAAA,MAAM,EAAE,KAAKK,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,CAACJ,UAAD,EAAa;AAAEK,MAAAA;AAAF,KAAb,KACC;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIC,OAAO,CAAC,4CAAD,CAAX,EAA2D;AACzDN,UAAAA,UAAU,GAAGO,KAAb,CAAmBC,GAAG,IAAI;AACxBC,YAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,WAFD;AAGD;AACF,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASG,KAAKP,KAAL,CAAWQ,QATd,CANJ,CADF;AAqBD;;AAjCgC;;AAoCnC,eAAevB,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ALL_ITEMS_QUERY } from './Items';\n\nconst DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\n\nclass DeleteItem extends Component {\n  update = (cache, payload) => {\n    // manually update the cache on the client, so it matches the server\n    // 1. Read the cache for the items we want\n    const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n    console.log(data, payload);\n    // 2. Filter the deleted itemout of the page\n    data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id);\n    // 3. Put the items back!\n    cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\n  };\n  render() {\n    return (\n      <Mutation\n        mutation={DELETE_ITEM_MUTATION}\n        variables={{ id: this.props.id }}\n        update={this.update}\n      >\n        {(deleteItem, { error }) => (\n          <button\n            onClick={() => {\n              if (confirm('Are you sure you want to delete this item?')) {\n                deleteItem().catch(err => {\n                  alert(err.message);\n                });\n              }\n            }}\n          >\n            {this.props.children}\n          </button>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default DeleteItem;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/cihadsaglam/wesbos/style-case/frontend/components/Order.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nclass Order extends React.Component {\n  render() {\n    return __jsx(Query, {\n      query: SINGLE_ORDER_QUERY,\n      variables: {\n        id: this.props.id\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, ({\n      data,\n      error,\n      loading\n    }) => {\n      if (error) return __jsx(Error, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n      if (loading) return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Loading...\");\n      const order = data.order;\n      return __jsx(OrderStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(Head, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Style Case - Order \", order.id)), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Order ID:\"), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.props.id)), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Charge\"), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, order.charge)), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Date\"), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, format(new Date(order.createdAt), 'MMMM d, YYYY h:mm a'))), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Order Total\"), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, formatMoney(order.total))), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Item Count\"), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, order.items.length)), __jsx(\"div\", {\n        className: \"items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, order.items.map(item => __jsx(\"div\", {\n        className: \"order-item\",\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        src: item.image,\n        alt: item.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"item-details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, item.title), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Qty: \", item.quantity), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Each: \", formatMoney(item.price)), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"SubTotal: \", formatMoney(item.price * item.quantity)), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, item.description))))));\n    });\n  }\n\n}\n\n_defineProperty(Order, \"propTypes\", {\n  id: PropTypes.string.isRequired\n});\n\nexport default Order;","map":{"version":3,"sources":["/Users/cihadsaglam/wesbos/style-case/frontend/components/Order.js"],"names":["React","PropTypes","Query","format","Head","gql","formatMoney","Error","OrderStyles","SINGLE_ORDER_QUERY","Order","Component","render","id","props","data","error","loading","order","charge","Date","createdAt","total","items","length","map","item","image","title","quantity","price","description","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\n\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nclass Order extends React.Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n  };\n  render() {\n    return (\n      <Query \n        query={SINGLE_ORDER_QUERY} \n        variables={{ id: this.props.id }}\n      >\n        {({ data, error, loading }) => {\n          if (error) return <Error error={error} />;\n          if (loading) return <p>Loading...</p>;\n          const order = data.order;\n          return (\n            <OrderStyles>\n              <Head>\n                <title>Style Case - Order {order.id}</title>\n              </Head>\n              <p>\n                <span>Order ID:</span>\n                <span>{this.props.id}</span>\n              </p>\n              <p>\n                <span>Charge</span>\n                <span>{order.charge}</span>\n              </p>\n              <p>\n                <span>Date</span>\n                <span>{format(new Date(order.createdAt), 'MMMM d, YYYY h:mm a')}</span>\n              </p>\n              <p>\n                <span>Order Total</span>\n                <span>{formatMoney(order.total)}</span>\n              </p>\n              <p>\n                <span>Item Count</span>\n                <span>{order.items.length}</span>\n              </p>\n              \n              <div className=\"items\">\n                {order.items.map(item => (\n                  <div className=\"order-item\" key={item.id}>\n                    <img src={item.image} alt={item.title} />\n                    <div className=\"item-details\">\n                      <h2>{item.title}</h2>\n                      <p>Qty: {item.quantity}</p>\n                      <p>Each: {formatMoney(item.price)}</p>\n                      <p>SubTotal: {formatMoney(item.price * item.quantity)}</p>\n                      <p>{item.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </OrderStyles>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default Order;"]},"metadata":{},"sourceType":"module"}
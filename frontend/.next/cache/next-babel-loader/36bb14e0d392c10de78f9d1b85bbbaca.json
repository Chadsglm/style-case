{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\nconst ALL_ITEMS_QUERY = gql`\n  query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    items(first: $first, skip: $skip, orderBy: createdAt_DESC) {\n      id\n      title\n      price\n      description\n      image\n      largeImage\n    }\n  }\n`;\nconst Center = styled.div.withConfig({\n  displayName: \"Items__Center\",\n  componentId: \"sc-1cmimuc-0\"\n})([\"text-align:center;\"]);\nconst ItemsList = styled.div.withConfig({\n  displayName: \"Items__ItemsList\",\n  componentId: \"sc-1cmimuc-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\n\nclass Items extends Component {\n  render() {\n    return __jsx(Center, null, __jsx(Pagination, {\n      page: this.props.page\n    }), __jsx(Query, {\n      query: ALL_ITEMS_QUERY // fetchPolicy=\"network-only\"\n      ,\n      variables: {\n        skip: this.props.page * perPage - perPage\n      }\n    }, ({\n      data,\n      error,\n      loading\n    }) => {\n      if (loading) return __jsx(\"p\", null, \"Loading...\");\n      if (error) return __jsx(\"p\", null, \"Error: \", error.message);\n      return __jsx(ItemsList, null, data.items.map(item => __jsx(Item, {\n        item: item,\n        key: item.id\n      })));\n    }), __jsx(Pagination, {\n      page: this.props.page\n    }));\n  }\n\n}\n\nexport default Items;\nexport { ALL_ITEMS_QUERY };","map":null,"metadata":{},"sourceType":"module"}
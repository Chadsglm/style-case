{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/cihadsaglam/wesbos/style-case/frontend/components/TakeMyMoney.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToken\", async (res, createOrder) => {\n      NProgress.start();\n      console.log('On Token Called!');\n      console.log(res.id); // manually call the mutation once we have the stripe token\n\n      const order = await createOrder({\n        variables: {\n          token: res.id\n        }\n      }).catch(err => {\n        alert(err.message);\n      });\n      Router.push({\n        pathname: '/order',\n        query: {\n          id: order.data.createOrder.id\n        }\n      });\n    });\n  }\n\n  render() {\n    return __jsx(User, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, ({\n      data: {\n        me\n      }\n    }) => __jsx(Mutation, {\n      mutation: CREATE_ORDER_MUTATION,\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, createOrder => __jsx(StripeCheckout, {\n      amount: calcTotalPrice(me.cart),\n      name: \"Style Case\",\n      description: `Order of ${totalItems(me.cart)} items!`,\n      image: me.cart.length && me.cart[0].item && me.cart[0].item.image,\n      stripeKey: \"pk_test_QaxgbzHm6jJJmZD3oG0KQSeH00rZyyyI9A\",\n      currency: \"EUR\",\n      email: me.email,\n      token: res => this.onToken(res, createOrder),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.props.children)));\n  }\n\n}\n\nexport default TakeMyMoney;","map":{"version":3,"sources":["/Users/cihadsaglam/wesbos/style-case/frontend/components/TakeMyMoney.js"],"names":["React","StripeCheckout","Mutation","Router","NProgress","PropTypes","gql","calcTotalPrice","Error","User","CURRENT_USER_QUERY","CREATE_ORDER_MUTATION","totalItems","cart","reduce","tally","cartItem","quantity","TakeMyMoney","Component","res","createOrder","start","console","log","id","order","variables","token","catch","err","alert","message","push","pathname","query","data","render","me","length","item","image","email","onToken","props","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,IAAeC,kBAAf,QAAyC,QAAzC;AAEA,MAAMC,qBAAqB,GAAGL,GAAI;;;;;;;;;;;;CAAlC;;AAcA,SAASM,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,KAAD,EAAQC,QAAR,KAAqBD,KAAK,GAAGC,QAAQ,CAACC,QAAlD,EAA4D,CAA5D,CAAP;AACD;;AAED,MAAMC,WAAN,SAA0BlB,KAAK,CAACmB,SAAhC,CAA0C;AAAA;AAAA;;AAAA,qCAC9B,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AACpCjB,MAAAA,SAAS,CAACkB,KAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,EAAhB,EAHoC,CAKpC;;AACA,YAAMC,KAAK,GAAG,MAAML,WAAW,CAAC;AAC9BM,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAER,GAAG,CAACK;AADF;AADmB,OAAD,CAAX,CAIjBI,KAJiB,CAIXC,GAAG,IAAI;AACdC,QAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,OANmB,CAApB;AAQA7B,MAAAA,MAAM,CAAC8B,IAAP,CAAY;AACVC,QAAAA,QAAQ,EAAE,QADA;AAEVC,QAAAA,KAAK,EAAE;AAAEV,UAAAA,EAAE,EAAEC,KAAK,CAACU,IAAN,CAAWf,WAAX,CAAuBI;AAA7B;AAFG,OAAZ;AAID,KAnBuC;AAAA;;AAqBxCY,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAED,MAAAA,IAAI,EAAE;AAAEE,QAAAA;AAAF;AAAR,KAAD,KACC,MAAC,QAAD;AACE,MAAA,QAAQ,EAAE3B,qBADZ;AAEE,MAAA,cAAc,EAAE,CAAC;AACfwB,QAAAA,KAAK,EAAEzB;AADQ,OAAD,CAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGW,WAAW,IACV,MAAC,cAAD;AACE,MAAA,MAAM,EAAEd,cAAc,CAAC+B,EAAE,CAACzB,IAAJ,CADxB;AAEE,MAAA,IAAI,EAAC,YAFP;AAGE,MAAA,WAAW,EAAG,YAAWD,UAAU,CAAC0B,EAAE,CAACzB,IAAJ,CAAU,SAH/C;AAIE,MAAA,KAAK,EAAEyB,EAAE,CAACzB,IAAH,CAAQ0B,MAAR,IAAkBD,EAAE,CAACzB,IAAH,CAAQ,CAAR,EAAW2B,IAA7B,IAAqCF,EAAE,CAACzB,IAAH,CAAQ,CAAR,EAAW2B,IAAX,CAAgBC,KAJ9D;AAKE,MAAA,SAAS,EAAC,4CALZ;AAME,MAAA,QAAQ,EAAC,KANX;AAOE,MAAA,KAAK,EAAEH,EAAE,CAACI,KAPZ;AAQE,MAAA,KAAK,EAAEtB,GAAG,IAAI,KAAKuB,OAAL,CAAavB,GAAb,EAAkBC,WAAlB,CARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUG,KAAKuB,KAAL,CAAWC,QAVd,CAPJ,CAFJ,CADF;AA2BD;;AAjDuC;;AAoD1C,eAAe3B,WAAf","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n  onToken = async (res, createOrder) => {\n    NProgress.start();\n    console.log('On Token Called!');\n    console.log(res.id);\n\n    // manually call the mutation once we have the stripe token\n    const order = await createOrder({\n      variables: {\n        token: res.id,\n      },\n    }).catch(err => {\n      alert(err.message);\n    });\n    \n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id },\n    });\n  };\n\n  render() {\n    return (\n      <User>\n        {({ data: { me } }) => (\n          <Mutation\n            mutation={CREATE_ORDER_MUTATION}\n            refetchQueries={[{\n              query: CURRENT_USER_QUERY\n            }]}\n          >\n            {createOrder => (\n              <StripeCheckout\n                amount={calcTotalPrice(me.cart)}\n                name=\"Style Case\"\n                description={`Order of ${totalItems(me.cart)} items!`}\n                image={me.cart.length && me.cart[0].item && me.cart[0].item.image}\n                stripeKey=\"pk_test_QaxgbzHm6jJJmZD3oG0KQSeH00rZyyyI9A\"\n                currency=\"EUR\"\n                email={me.email}\n                token={res => this.onToken(res, createOrder)}\n              >\n                {this.props.children}\n              </StripeCheckout>\n            )}\n          </Mutation>\n        )}\n      </User>\n    );\n  }\n}\n\nexport default TakeMyMoney;"]},"metadata":{},"sourceType":"module"}
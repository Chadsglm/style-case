{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nclass Order extends React.Component {\n  render() {\n    return __jsx(Query, {\n      query: SINGLE_ORDER_QUERY,\n      variables: {\n        id: this.props.id\n      }\n    }, ({\n      data,\n      error,\n      loading\n    }) => {\n      if (error) return __jsx(Error, {\n        error: error\n      });\n      if (loading) return __jsx(\"p\", null, \"Loading...\");\n      const order = data.order;\n      return __jsx(OrderStyles, null, __jsx(Head, null, __jsx(\"title\", null, \"Style Case - Order \", order.id)), __jsx(\"p\", null, __jsx(\"span\", null, \"Order ID:\"), __jsx(\"span\", null, this.props.id)), __jsx(\"p\", null, __jsx(\"span\", null, \"Charge\"), __jsx(\"span\", null, order.charge)), __jsx(\"p\", null, __jsx(\"span\", null, \"Date\"), __jsx(\"span\", null, format(new Date(order.createdAt), 'PPpp'))), __jsx(\"p\", null, __jsx(\"span\", null, \"Order Total\"), __jsx(\"span\", null, formatMoney(order.total))), __jsx(\"p\", null, __jsx(\"span\", null, \"Item Count\"), __jsx(\"span\", null, order.items.length)), __jsx(\"div\", {\n        className: \"items\"\n      }, order.items.map(item => __jsx(\"div\", {\n        className: \"order-item\",\n        key: item.id\n      }, __jsx(\"img\", {\n        src: item.image,\n        alt: item.title\n      }), __jsx(\"div\", {\n        className: \"item-details\"\n      }, __jsx(\"h2\", null, item.title), __jsx(\"p\", null, \"Qty: \", item.quantity), __jsx(\"p\", null, \"Each: \", formatMoney(item.price)), __jsx(\"p\", null, \"SubTotal: \", formatMoney(item.price * item.quantity)), __jsx(\"p\", null, item.description))))));\n    });\n  }\n\n}\n\nexport default Order;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Query, Mutation } from 'react-apollo';\nimport Error from './ErrorMessage';\nimport gql from 'graphql-tag';\nimport Table from './styles/Table';\nimport StyleButton from './styles/StyleButton';\nconst possiblePermissions = ['ADMIN', 'USER', 'ITEMCREATE', 'ITEMUPDATE', 'ITEMDELETE', 'PERMISSIONUPDATE'];\nconst UPDATE_PERMISSIONS_MUTATION = gql`\n  mutation updatePermissions($permissions: [Permission], $userId: ID!) {\n    updatePermissions(permissions: $permissions, userId: $userId) {\n      id\n      permissions\n      name\n      email\n    }\n  }\n`;\nconst ALL_USERS_QUERY = gql`\n  query {\n    users {\n      id\n      name\n      email\n      permissions\n    }\n  }\n`;\n\nconst Permissions = props => __jsx(Query, {\n  query: ALL_USERS_QUERY\n}, ({\n  data,\n  loading,\n  error\n}) => __jsx(\"div\", null, __jsx(Error, {\n  error: error\n}), __jsx(\"div\", null, __jsx(\"h2\", null, \"Manage Permissions\"), __jsx(Table, null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Name\"), __jsx(\"th\", null, \"Email\"), possiblePermissions.map(permission => __jsx(\"th\", {\n  key: permission\n}, permission)), __jsx(\"th\", null, \"\\uD83D\\uDC47\\uD83C\\uDFFB\"))), __jsx(\"tbody\", null, data.users.map(user => __jsx(UserPermissions, {\n  user: user,\n  key: user.id\n})))))));\n\nclass UserPermissions extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      permissions: this.props.user.permissions\n    });\n\n    _defineProperty(this, \"handlePermissionChange\", event => {\n      let checkbox = event.target; // take a copy of the current permissions\n\n      let updatedPermissions = [...this.state.permissions]; // figure out if we need to remove or add this permission\n\n      if (checkbox.checked) {\n        // add it in!\n        updatedPermissions.push(checkbox.value);\n      } else {\n        updatedPermissions = updatedPermissions.filter(permission => permission !== checkbox.value);\n      }\n\n      this.setState({\n        permissions: updatedPermissions\n      });\n      console.log(updatedPermissions);\n    });\n  }\n\n  render() {\n    const user = this.props.user;\n    return __jsx(Mutation, {\n      mutation: UPDATE_PERMISSIONS_MUTATION,\n      variables: {\n        permissions: this.state.permissions,\n        userId: this.props.user.id\n      }\n    }, (updatePermissions, {\n      loading,\n      error\n    }) => __jsx(React.Fragment, null, error && __jsx(\"tr\", null, __jsx(\"td\", {\n      colspan: \"10\"\n    }, __jsx(Error, {\n      error: error\n    }))), __jsx(\"tr\", null, __jsx(\"td\", null, user.name), __jsx(\"td\", null, user.email), possiblePermissions.map(permission => __jsx(\"td\", {\n      key: permission\n    }, __jsx(\"label\", {\n      htmlFor: `${user.id}-permission-${permission}`\n    }, __jsx(\"input\", {\n      id: `${user.id}-permission-${permission}`,\n      type: \"checkbox\",\n      checked: this.state.permissions.includes(permission),\n      value: permission,\n      onChange: this.handlePermissionChange\n    })))), __jsx(\"td\", null, __jsx(StyleButton, {\n      type: \"button\",\n      disabled: loading,\n      onClick: updatePermissions\n    }, \"Updat\", loading ? 'ing' : 'e')))));\n  }\n\n}\n\nexport default Permissions;","map":null,"metadata":{},"sourceType":"module"}